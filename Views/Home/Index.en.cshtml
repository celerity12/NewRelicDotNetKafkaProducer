@{
    ViewData["Title"] = "Kafka Messaging Demo - Producer";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>

    <div id="loading" class="loading-bar">
        Loading... Please wait.
        <div class="progress-bar">
            <div class="progress"></div>
        </div>
    </div>

    <div class="text-center">
        <h1 class="display-4">Kafka Producer Demo</h1>
        <p style="color: #007bff; font-weight: bold;">This is a Kafka message producer.</p>
    </div>

    <div id="content" style="display:none;">
        <p>Your Lucky Number is:</p>
        <p id="luckyNumber"></p>
        <p>Waiting Time: <span id="delay"></span> milliseconds</p>
        <p>Calculation Result: <span id="calculationResult"></span></p>
    </div>

    <hr />
    <h3>Background Process Demo</h3>
    <p>This button will run a background process that simulates a long-running task.</p>
    <form asp-action="RunInvisibleBackgroundProcess" method="post" style="display:inline;" id="backgroundForm">
        @Html.AntiForgeryToken()
        <button type="submit" id="backgroundBtn">Run Background Process</button>
    </form>
    <p id="backgroundStatus" style="margin-top: 20px;"></p>
    <p>
        <button type="button" id="fireAndForgetBtn">Fire and Forget</button>
    </p>
    <hr />
    <div id="kafka-section">
        <h3>Kafka Messaging Demo</h3>
        @Html.AntiForgeryToken()
        <input type="text" id="kafkaMessageInput" placeholder="Enter message for Kafka" style="width:300px;" />
        <button id="sendKafkaBtn" type="button">Send to Kafka</button>
        <p style="margin-top: 20px;">This button will send a message to Kafka.</p>
        <p>Messages sent to Kafka will be processed by a consumer in the background.</p>
        <br /><br />
        <!--
        <label for="kafkaConsumerOutput"><b>Latest message from Kafka Consumer:</b></label><br />
        <textarea id="kafkaConsumerOutput" rows="3" cols="50" readonly></textarea>
        -->
    </div>


</div>

<style>
    .loading-bar {
        font-size: 18px;
        margin-bottom: 20px;
    }

    .progress-bar {
        width: 100%;
        height: 20px;
        background-color: #f3f3f3;
        border: 1px solid #ccc;
        margin-top: 5px;
    }

    .progress {
        height: 100%;
        width: 0%;
        background-color: #4caf50;
        animation: progressAnimation 2s infinite linear;
    }

    @@keyframes progressAnimation {
        0% { width: 0%; }
        100% { width: 100%; }
    }
</style>

<script>
    window.onload = function() {
        var delay = @ViewBag.Delay;
        document.getElementById('delay').textContent = delay;

        setTimeout(function() {
            document.getElementById('luckyNumber').textContent = @ViewBag.LuckyNumber;
            document.getElementById('calculationResult').textContent = @ViewBag.CalculationResult;
            document.getElementById('loading').style.display = 'none';
            document.getElementById('content').style.display = 'block';
        }, delay);
    };

    document.addEventListener('DOMContentLoaded', function () {
        // Remove or comment out fetchLatestKafkaMessage and polling

        /*
        function fetchLatestKafkaMessage() {
            fetch('/Home/GetLatestKafkaMessage')
                .then(resp => resp.json())
                .then(msgData => {
                    document.getElementById('kafkaConsumerOutput').value = msgData.message || 'No message received yet.';
                });
        }
        */

        document.getElementById('sendKafkaBtn').addEventListener('click', function () {
            var message = document.getElementById('kafkaMessageInput').value;
            fetch('/Home/ProduceKafkaMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ message: message })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // fetchLatestKafkaMessage();
                    // Optionally show a success message
                    alert('Message sent to Kafka!');
                } else {
                    // document.getElementById('kafkaConsumerOutput').value = 'Error sending message to Kafka.';
                    alert('Error sending message to Kafka.');
                }
            });
        });

        document.getElementById('fireAndForgetBtn').addEventListener('click', function () {
            fetch('/Home/fire-and-forget')
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    document.getElementById('backgroundStatus').textContent = data.message;
                })
                .catch(error => {
                    document.getElementById('backgroundStatus').textContent = 'Error: ' + error.message;
                });
        });

        document.getElementById('backgroundForm').addEventListener('submit', function (e) {
            e.preventDefault();
            var form = e.target;
            var token = form.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch('/Home/RunInvisibleBackgroundProcess', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
            })
            .then(data => {
                document.getElementById('backgroundStatus').textContent = data.message;
            })
            .catch(error => {
                document.getElementById('backgroundStatus').textContent = 'Error: ' + error.message;
            });
        });

        // Remove initial fetch and polling for consumer
        // fetchLatestKafkaMessage();
        // setInterval(fetchLatestKafkaMessage, 5000);
    });
</script>